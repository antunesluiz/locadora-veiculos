/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package veiculo;

import cliente.Cliente;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luiz Antunes
 */
public class VeiculoReservado extends javax.swing.JInternalFrame {

    private Cliente cliente;

    /**
     * Creates new form VeiculoReservado
     *
     * @param cliente
     */
    public VeiculoReservado(Cliente cliente) {

        if (cliente != null) {
            this.cliente = cliente;
        }

        initComponents();
        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 48)); // NOI18N
        jLabel1.setText("Veículos Reservados");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "id", "Nome", "Data início", "Data fim", "Preço"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionForeground(new java.awt.Color(0, 153, 153));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(240, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(302, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel defaultTableModel;

    public void popularTabela() {
        VeiculoDaoImpl veiculoDaoImpl = new VeiculoDaoImpl();
        ArrayList<ClienteHasVeiculo> clienteVeiculo = veiculoDaoImpl.getVeiculosAlugadosByCliente(cliente.getId());

        String[] colunas = {"id", "Nome", "Data Início", "Data Fim", "Preço"};

        defaultTableModel = new DefaultTableModel(colunas, 0);
        jTable1.setModel(defaultTableModel);

        if (clienteVeiculo != null && clienteVeiculo.size() > 0) {
            clienteVeiculo.stream().map((clienteHasVeiculo) -> {
                double preco = veiculoDaoImpl.getCategoriaPeloId(veiculoDaoImpl.getVeiculoById(clienteHasVeiculo.getVeiculoId()).getCategoriaVeiculo()).getPreco();
                String modelo = veiculoDaoImpl.getVeiculoById(clienteHasVeiculo.getVeiculoId()).getModelo();

                Object[] objects = new Object[5];

                if (preco != 0) {
                    if (!modelo.equals("")) {
                        objects[0] = clienteHasVeiculo.getId();
                        objects[1] = modelo;
                        objects[2] = clienteHasVeiculo.getDataInicio();
                        objects[3] = clienteHasVeiculo.getDataFim();
                        objects[4] = preco;
                    } else {
                        objects[0] = clienteHasVeiculo.getId();
                        objects[2] = clienteHasVeiculo.getDataInicio();
                        objects[3] = clienteHasVeiculo.getDataFim();
                        objects[4] = preco;
                    }
                } else {
                    if (!modelo.equals("")) {
                        objects[0] = clienteHasVeiculo.getId();
                        objects[2] = clienteHasVeiculo.getDataInicio();
                        objects[3] = clienteHasVeiculo.getDataFim();
                    } else {
                        objects[0] = clienteHasVeiculo.getId();
                        objects[1] = modelo;
                        objects[2] = clienteHasVeiculo.getDataInicio();
                        objects[3] = clienteHasVeiculo.getDataFim();
                    }
                }

                return objects;
            }).forEachOrdered((objects) -> {
                defaultTableModel.addRow(objects);
            });
        }

        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Object data = jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0);

                int input = JOptionPane.showConfirmDialog(VeiculoReservado.this, "Você tem certeza que deseja não reservar esse veículo?");

                if (input == 1) {
                    //faz nada
                } else {
                    if (input == 2) {
                        //faz nada
                    } else {
                        if (data != null) {
                            if (veiculoDaoImpl.naoReservaVeiculo((int) data)) {
                                clienteVeiculo.stream().filter((hasVeiculo) -> (hasVeiculo.getId() == (int) data)).forEachOrdered((hasVeiculo) -> {
                                    if (veiculoDaoImpl.updateStatusVeiculo(hasVeiculo.getVeiculoId(), 1)) {
                                        JOptionPane.showMessageDialog(null, "Veículo não reservado com sucesso");

                                        ((DefaultTableModel) jTable1.getModel()).setRowCount(0);
                                        popularTabela();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Não foi possível não reservar veículo");
                                    }
                                });
                            } else {
                                JOptionPane.showMessageDialog(null, "Não foi possível não reservar veículo");
                            }
                        }
                    }
                }
            }
        });
    }
}
